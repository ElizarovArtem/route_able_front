/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as MenuImport } from './../routes/menu'
import { Route as PrivateRouteImport } from './../routes/_private/route'
import { Route as IndexImport } from './../routes/index'
import { Route as PrivateLkImport } from './../routes/_private/lk'
import { Route as PrivateCoachCoachIdImport } from './../routes/_private/coach/$coachId'
import { Route as PrivateClientClientIdImport } from './../routes/_private/client/$clientId'

// Create/Update Routes

const MenuRoute = MenuImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRouteRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PrivateLkRoute = PrivateLkImport.update({
  id: '/lk',
  path: '/lk',
  getParentRoute: () => PrivateRouteRoute,
} as any)

const PrivateCoachCoachIdRoute = PrivateCoachCoachIdImport.update({
  id: '/coach/$coachId',
  path: '/coach/$coachId',
  getParentRoute: () => PrivateRouteRoute,
} as any)

const PrivateClientClientIdRoute = PrivateClientClientIdImport.update({
  id: '/client/$clientId',
  path: '/client/$clientId',
  getParentRoute: () => PrivateRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRoute
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuImport
      parentRoute: typeof rootRoute
    }
    '/_private/lk': {
      id: '/_private/lk'
      path: '/lk'
      fullPath: '/lk'
      preLoaderRoute: typeof PrivateLkImport
      parentRoute: typeof PrivateRouteImport
    }
    '/_private/client/$clientId': {
      id: '/_private/client/$clientId'
      path: '/client/$clientId'
      fullPath: '/client/$clientId'
      preLoaderRoute: typeof PrivateClientClientIdImport
      parentRoute: typeof PrivateRouteImport
    }
    '/_private/coach/$coachId': {
      id: '/_private/coach/$coachId'
      path: '/coach/$coachId'
      fullPath: '/coach/$coachId'
      preLoaderRoute: typeof PrivateCoachCoachIdImport
      parentRoute: typeof PrivateRouteImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteRouteChildren {
  PrivateLkRoute: typeof PrivateLkRoute
  PrivateClientClientIdRoute: typeof PrivateClientClientIdRoute
  PrivateCoachCoachIdRoute: typeof PrivateCoachCoachIdRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateLkRoute: PrivateLkRoute,
  PrivateClientClientIdRoute: PrivateClientClientIdRoute,
  PrivateCoachCoachIdRoute: PrivateCoachCoachIdRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PrivateRouteRouteWithChildren
  '/menu': typeof MenuRoute
  '/lk': typeof PrivateLkRoute
  '/client/$clientId': typeof PrivateClientClientIdRoute
  '/coach/$coachId': typeof PrivateCoachCoachIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PrivateRouteRouteWithChildren
  '/menu': typeof MenuRoute
  '/lk': typeof PrivateLkRoute
  '/client/$clientId': typeof PrivateClientClientIdRoute
  '/coach/$coachId': typeof PrivateCoachCoachIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteRouteWithChildren
  '/menu': typeof MenuRoute
  '/_private/lk': typeof PrivateLkRoute
  '/_private/client/$clientId': typeof PrivateClientClientIdRoute
  '/_private/coach/$coachId': typeof PrivateCoachCoachIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/menu'
    | '/lk'
    | '/client/$clientId'
    | '/coach/$coachId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/menu' | '/lk' | '/client/$clientId' | '/coach/$coachId'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/menu'
    | '/_private/lk'
    | '/_private/client/$clientId'
    | '/_private/coach/$coachId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  MenuRoute: typeof MenuRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  MenuRoute: MenuRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_private",
        "/menu"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_private": {
      "filePath": "_private/route.tsx",
      "children": [
        "/_private/lk",
        "/_private/client/$clientId",
        "/_private/coach/$coachId"
      ]
    },
    "/menu": {
      "filePath": "menu.tsx"
    },
    "/_private/lk": {
      "filePath": "_private/lk.tsx",
      "parent": "/_private"
    },
    "/_private/client/$clientId": {
      "filePath": "_private/client/$clientId.tsx",
      "parent": "/_private"
    },
    "/_private/coach/$coachId": {
      "filePath": "_private/coach/$coachId.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
